/*
 * STYLIZATION FOR THE INTERFACE
 * 
 * This is a bare-bones stylization, with most things left untouched.
 * You should add your own CSS in the header AFTER including this,
 * and add the appropriate styling (colors, borders, etc) there.
 *
 * The primary purpose of this is to give reasonable margins
 * and alignment.
 */

/* Wrapper for entire sandbox */
.pfui-wrapper { 
	min-width: 300px;
	max-width: 1024px;
	/* IE Hack */
	width: expression( document.body.clientWidth > 1024 ? "1024px" :
			  (document.body.clientWidth < 300 ? "300px" : "auto"));
}

/* ERROR MESSAGE AT TOP OF SANDBOX */
.pfui-errormsg {
	font-size: 16pt;
}

form#main {
	border: 0 none;
}

/* Main body of the sandbox */
#pfui-sandbox {
	margin: 25px 0px 25px 0px;
	margin-left: auto;
	margin-right: auto;
	text-align: left;
	min-width: 300px;
	max-width: 1024px;
}

/* TITLE area of the sandbox */

h1#pfui-sandbox-title { }

/*
 * These are the persisten DIV tags above and below the sandbox,
 * but inside the wrapper.
*/
#pfui-persistent-bottom { }
#pfui-persistent-top { }



/************** ACCORDION PIECES ****************/
/*
 * You should consider modifying the ui-accordion
 * entries below since it will override the style
 * set by the accordion constructor immediately
 * and will always win.  Otherwise, when the classes
 * for the widget are added later when the page is
 * re-rendered, the widget defaults can override
 * things set here for the accordion panes.
 */

/* The accordion master pane */
div#accordion {  }


/* This will refer to each target div */
div#accordion div { }


/* The accordion headings are H3 tags.  This sets their style */
div#accordion h3 {
	font-size:1.1em;
	font-weight:bold;
	text-align:left;
}

/* The info space at the bottom of the page */
#pfui-details { padding-bottom: 25px; }

/* errors for inputs (span tags generated from $ui->input_err) */
.pfui-postfix-err {  }

/* add a space before our error so it doesn't butt up against our input */
.pfui-postfix-err:before { content: " "; }

/* span to encapsulate the line break (or whatever) after an input
   It probably doesn't need any style, but it's here for completeness */
.pfui-post-input { }

/* add a space so it's not cramped up against the input */
.pfui-post-input:before { content: " "; }

/* paragraphs created for messages
 * These should be stylized to fit the structure of the page -- perhaps
 * change the margins, padding, line-height, etc.  
 */
.pfui-p-input { }


/* the "message" from $ui->set_message gets put in a span tag with this class
 *
 * It is a span, so you can't do any positioning.  But, you can give it a background,
 * change the font, color, etc.
 */
.pfui-message { }


/*
 * All of the prefixes, including items in a radio group.
 * This is a paragraph tag.
 */
.pfui-prefix {
	/* FUNCTIONAL CSS -- DO NOT CHANGE */
	/* white-space: nowrap; */
	display: -moz-inline-stack; display: inline-block; /* IE Hack */ zoom: 1; *display: inline;
	/* END FUNCTIONAL CSS */
	
	/* Stylization should go down here */
	vertical-align: middle;
}

/* The label for the text corresponding to a radio option */
.pfui-radio-label { }

/* The suffix for a radio option */
.pfui-radio-suff { }

.pfui-radio-wrapper {
	/* again, we need the IE hack */
	display: -moz-inline-stack; display: inline-block; /* IE Hack */ zoom: 1; *display: inline;
	margin: 0;
	vertical-align: middle;
}

/* The hidden message for indicating to screen readers that there is active content */
.pfui-hidden-div {
	clip: rect(1px, 1px, 1px, 1px);
	height: 1px;
	overflow: hidden;
	position: absolute !important;
}

.ui-accordion-content input, textarea, select {
	display: inline-block;
	vertical-align: middle;
}

/*
 * THE FUNCTIONAL CSS SHOULD BE TAKEN FROM THE GOOGLE CONTENT DISTRIBUTING NETWORK AT
 * http://ajax.googleapis.com/ajax/libs/jqueryui/VERSION/themes/base/jquery-ui.css
 * where VERSION should match that of the jquery-ui JAVASCRIPT at:
 * https://ajax.googleapis.com/ajax/libs/jqueryui/VERSION/jquery-ui.min.js
 *
 * This is so the functional css matches the version of the user interface widgets.
 *
 * Of course, if a theme fits in the page nicely, you can use something other than 'base'.
 * Also, 
*/

/*
 * Modifications to the standard widgets. 
 *
 */

.ui-widget { font-family: inherit; }

.ui-widget-content { background: #ffffff; }
.ui-widget-header { background: #cccccc; }

/*
 * ACCORDION STYLING
 *
 * To change the styling of the accordion, you should use these classes only.
 * Of course, you can stylize their children too.  Things changing layout
 * in particular should be placed here since these classes are added after
 * the element is constructed, and the defaults can override things set
 * by the tag specifier above.  Remember, it's the last thing set that wins.
 * 
*/

/* Main accordion wrapper */
.ui-accordion {
	border: 0 none;
	background:inherit;
	padding:0 0 0 5px;
}
.ui-accordion-header { border: 0 none; background: inherit; }
.ui-accordion-content { border: 0 none; background: inherit; }
.ui-accordion-content-active {  }


/*
 * DATE PICKER STYLING
 *
 * To change the styling of the accordion, you should use these classes only.
 * Of course, you can stylize their children too, such as
 *
 * .ui-datepicker-calendar tr { }
 * to format the rows of the calendar table
 *
 * There is no equivalent to this in the layout above, so any styling of the
 * datepicker widget should go here.
 * 
*/

.ui-datepicker { }
.ui-datepicker-header { }
.ui-datepicker-prev { }
.ui-datepicker-next { }
.ui-datepicker-title { }
.ui-datepicker-month { }
.ui-datepicker-year { }
.ui-datepicker-calendar { }
.ui-datepicker-week-end { }
.ui-datepicker-other-month { }
.ui-datepicker-buttonpane { }
.ui-datepicker-current { }
.ui-datepicker-close { }



